<div id="relationships-filters">
<div class="form-inline">
  <select id="relationships-category" class="form-control">
    <%= options_for_select(table.categories) %>
  </select>
  <select id="relationships-type" class="form-control">
    <%= options_for_select(table.types) %>
  </select>
  <select id="relationships-industry" class="form-control">
    <%= options_for_select(table.industries) %>
  </select>
  <% if table.interlocks? %>
  <select id="relationships-interlock" class="form-control">
    <%= options_for_select(table.interlocks) %>
  </select>  
  <% end %>
  <div id="relationships-filters-line2">
    <input id="relationships-search" class="form-control" type="text" placeholder="search">
    <input id="relationships-amount" class="form-control" type="text" placeholder="amount">
    &nbsp;&nbsp;<input id="relationships-current" type="checkbox"> Current
    &nbsp;&nbsp;<input id="relationships-board" type="checkbox"> Board Members
    &nbsp;&nbsp;<input id="relationships-executive" type="checkbox"> Executives
  </div>
</div>
</div>

<table id="relationships-table" class="table table-striped table-bordered">
  <thead>
    <tr>
      <% if table.list? %>
      <th>List Entity</th>
      <% end %>
      <th>Related Entity</th>
      <th>Category</th>
      <th>Details</th>
      <th>Date(s)</th>
      <th></th>
    </tr>
  </thead>
</table>

<script>
var data = <%= raw(table.data.to_json); %>

var ternary = function(data, type, row) {
  if (data == null) {
    return "null";
  } else if (data == true) {
    return "true";
  } else {
    return "false";
  }
}

$(document).ready(function() {
  $('#relationships-table').DataTable({
    data: data,
    dom: "<'buttons'>iprtp",
    pageLength: 100,
    columns: [
      <% if table.list? %>
      {
        data: 'entity_name',
        name: 'entity_name',
        width: "20%",
        render: function(data, type, row) {
          var a = document.createElement('a');
          a.href = row.entity_url;
          a.setAttribute('class', 'entity-link');
          a.innerHTML = row.entity_name;
          return a.outerHTML;
        }
      },
      <% end %>
      { 
        data: 'related_entity_name', 
        name: 'related_entity_name', 
        width: '<%= table.list? ? "20%" : "40%" %>',
        render: function(data, type, row) {
          var a = document.createElement('a');
          a.href = row.related_entity_url;
          a.setAttribute('class', 'entity-link');
          a.innerHTML = row.related_entity_name;
          var str = a.outerHTML;
          <% unless table.list? %>
          var blurb = document.createElement('span');
          blurb.setAttribute('class', 'entity-blurb');
          blurb.innerHTML = row.related_entity_blurb_excerpt;
          str += " &nbsp; " + blurb.outerHTML;
          <% end %>
          return  str;
        }
      },
      { 
        data: 'category',
        name: 'category',
        width: "10%" 
      },
      { 
        data: 'description',
        name: 'description',
        render: function(data, type, row) {
          if (row.amount) {
            return data + " &bull; $" + row.amount
          } else {
            return data;
          }
        }
      },
      { 
        data: 'date',
        name: 'date',
        width: "10%",
        render: function(data, type, row) {
          if (data == "") {
            if (row.is_current == "") {
              return null;
            } else if (row.is_current == true) {
              return "(current)";
            } else {
              return "(past)";
            }
          } else {
            return data;
          }
        }
      },
      {
        data: 'more',
        name: 'more',
        sortable: false,
        searchable: false,
        render: function(data, type, row) {
          var a = document.createElement('a');
          a.href = row.url;
          a.innerHTML = 'more';
          return a.outerHTML;
        }
      },
      {
        data: 'id',
        name: 'id',
        visible: false,
        searchable: false
      },
      {
        data: 'related_entity_types',
        name: 'related_entity_types',
        visible: false, 
        searchable: true
      },
      {
        data: 'is_current',
        name: 'is_current',
        render: ternary,
        visible: false,
        searchable: true
      },
      {
        data: 'is_board',
        name: 'is_board',
        render: ternary,
        visible: false,
        searchable: true
      },
      {
        data: 'is_executive',
        name: 'is_executive',
        render: ternary,
        visible: false,
        searchable: true
      },
      {
        data: 'amount',
        name: 'amount',
        visible: false,
        searchable: true
      },
      {
        data: 'related_entity_blurb',
        name: 'related_entity_blurb',
        visible: false,
        searchable: true
      },
      {
        data: 'related_entity_blurb_excerpt',
        name: 'related_entity_blurb_excerpt',
        visible: false,
        searchable: false
      },
      {
        data: 'related_entity_industries',
        name: 'related_entity_industries',
        visible: false,
        searchable: true
      },
      {
        data: 'master_search',
        name: 'master_search',
        visible: false,
        searchable: true,
        render: function(data, type, row) {
          var keys = ['related_entity_name', 'related_entity_blurb', 'category', 'description', 'date', 'related_entity_types', 'related_entity_industries', 'amount']
          return keys.map(function(key) { return row[key] }).join('  ');
        }
      },
      {
        data: 'interlock_ids',
        name: 'interlock_ids',
        visible: false,
        searchable: true
      }
    ]
  });

  var tbl = $('#relationships-table').DataTable();

  var category = $('#relationships-category');
  category.on('change', function() {
    tbl.columns('category:name').search($(this).val()).draw();
  });

  var type = $('#relationships-type');
  type.on('change', function() {
    var val = $(this).val() ? "\\b" + $(this).val() + "\\b" : "";
    tbl.columns('related_entity_types:name').search(val, true).draw();
  });

  var industry = $('#relationships-industry');
  industry.on('change', function() {
    var val = $(this).val() ? "\\b" + $(this).val() + "\\b" : "";
    tbl.columns('related_entity_industries:name').search(val, true).draw();
  });

  var interlock = $('#relationships-interlock');
  interlock.on('change', function() {
    var val = $(this).val() ? "\\b" + $(this).val() + "\\b" : "";
    tbl.columns('interlock_ids:name').search(val, true).draw();
  });

  var current = $('#relationships-current');
  current.on('change', function() {
    if (this.checked) {
      tbl.column('is_current:name').search("true").draw();
    } else {
      tbl.columns('is_current:name').search("").draw();
    }
  });

  var board = $('#relationships-board');
  board.on('change', function() {
    if (this.checked) {
      tbl.column('is_board:name').search("true").draw();
    } else {
      tbl.columns('is_board:name').search("").draw();
    }
  });

  var executive = $('#relationships-executive');
  executive.on('change', function() {
    if (this.checked) {
      tbl.column('is_executive:name').search("true").draw();
    } else {
      tbl.columns('is_executive:name').search("").draw();
    }
  });

  $.fn.dataTable.ext.search.push(
    function(settings, data, dataIndex) {
      var val = $('#relationships-amount').val();
      var min = parseInt(val);
      var amount = parseFloat(data[10]) || 0;

      if (isNaN(min)) {
        return true;
      }

      if (isNaN(amount)) {
        return false;
      }

      if (amount >= min) {
        return true;
      }

      return false;
    }
  );

  var search = $('#relationships-search');
  search.keyup(function() {
    tbl.columns('master_search:name').search($(this).val()).draw();
  });

  $('#relationships-amount').keyup(function() {
    tbl.draw();
  });

  var array_to_csv_data = function(ary) {
    var str = "data:text/csv;charset=utf-8,";
    var lines = ary.map(function(data){
      return data.join(",");
    });
    str += lines.join("\n");    
    return encodeURI(str);
  }

  var escape_csv_value = function(value) {
    var value = value === null ? '' : value.toString();
    value = value.replace(/"/g, '""');
    if (value.search(/("|,|\n)/g) >= 0) {
      value = '"' + value + '"';      
    }
    return value;  
  }

  var a = document.createElement('a');
  a.innerHTML = 'Export CSV';
  a.setAttribute('class', 'btn btn-default');
  a.href="#";
  $('.buttons')[0].appendChild(a);
  $(a).on('click', function() {
    var fields = ['id', 'related_entity_id', 'related_entity_name', 'related_entity_blurb', 'related_entity_types', 'category', 'description', 'is_current', 'start_date', 'end_date', 'is_board', 'is_executive']
    var data = [fields]
    var rows = $('#relationships-table').dataTable()._('tr', { filter: "applied" });
    data = data.concat(Array.prototype.slice.apply(rows).map(function(d) {
      return fields.map(function(field) {
        return escape_csv_value(d[field]);
      });
    }));
    window.open(array_to_csv_data(data));
  });

  var str_fields = ['category', 'type', 'industry', 'interlock', 'search', 'amount'];
  var bool_fields = ['current', 'board', 'executive'];

  var a = document.createElement('a');
  a.innerHTML = 'Link';
  a.setAttribute('class', 'btn btn-default');
  a.href="javascript:void(0)";
  $('.buttons')[0].appendChild(a);
  $(a).on("click", function() {
    var fields = {};
    str_fields.forEach(function(field) {
      var val = $('#relationships-' + field).val();
      if (val) {
        fields[field] = val;
      }
    });
    bool_fields.forEach(function(field) {
      var checked = $('#relationships-' + field)[0].checked;
      if (checked) {
        fields[field] = true;
      }
    });

    if (search.val()) {
      fields['search'] = search.val();
    }

    var base = window.location.href.split("#")[0];
    var hash = Object.keys(fields).map(function(key) { return key + "=" + fields[key]; }).join('|');
    window.location.hash = hash;
    return false;
  });

  var init_search = "";
  window.location.hash.slice(1).split('|').forEach(function(pair) {
    pair = pair.split('=');
    var key = pair[0];
    var val = pair[1];

    var e = $('#relationships-' + key);

    if (str_fields.indexOf(key) !== -1) {
      e.val(val);
      e.trigger('change');

    } else if (bool_fields.indexOf(key) !== -1) {
      var bool = (val === "true");
      e.prop('checked', bool);
      e.trigger('change');
    }

    if (key == 'search') {
      init_search = val;
    }
  });

  tbl.columns('master_search:name').search(init_search).draw();
});
</script>